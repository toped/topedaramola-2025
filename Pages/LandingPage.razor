@page "/"
@using portfolio.Services
@inject ThemeConfig ThemeConfig
@implements IDisposable

<div class="google-container" style="background-color: @ThemeConfig.BackgroundColor; color: @ThemeConfig.TextColor">
    <div class="profile-section">
        <div class="theme-toggle">
            @foreach (var theme in ThemeConfig.GetAvailableThemes())
            {
                <button class="theme-button @(ThemeConfig.CurrentTheme == theme ? "active" : "")"
                        @onclick="() => ThemeConfig.SetTheme(theme)">
                    @theme
                </button>
            }
        </div>
        <img src="images/profile-picture.png" alt="Profile" class="profile-picture" />
    </div>

    <div class="main-content">
        <div class="logo-section">
            <h1 class="google-style">Tope Daramola</h1>
        </div>
        
        <div class="search-section">
            <div class="search-bar @(showSuggestions && string.IsNullOrEmpty(searchQuery) ? "with-dropdown" : "")" 
                style="background-color: @ThemeConfig.SearchBarBackground; border-color: @ThemeConfig.SearchBarBorder">
                <svg class="search-icon" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path fill="currentColor" d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>
                </svg>
                <input type="text" 
                    @bind="searchQuery" 
                    @bind:event="oninput"
                    @onkeyup="HandleSearch"
                    @onfocus="ShowSuggestions"
                    @onblur="HideSuggestions"
                    placeholder="Try searching for 'skills', 'experience', or 'education'"
                    class="search-input"
                    @ref="searchInput"
                    style="background-color: @ThemeConfig.SearchBarBackground; color: @ThemeConfig.TextColor" />
            </div>
            
            @if (showSuggestions && string.IsNullOrEmpty(searchQuery))
            {
                <div class="search-dropdown" 
                    style="background-color: @ThemeConfig.SearchBarBackground; border-color: @ThemeConfig.SearchBarBorder">
                    @foreach (var suggestion in searchSuggestions)
                    {
                        <div class="dropdown-item" 
                            @onmousedown="@(() => ApplySuggestion(suggestion))"
                            style="color: @ThemeConfig.TextColor">
                            <svg class="suggestion-icon" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path fill="currentColor" d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.25 2.52.77-1.28-3.52-2.09V8z"></path>
                            </svg>
                            @suggestion
                        </div>
                    }
                </div>
            }

            <div class="search-buttons">
                <a href="https://github.com/toped" target="_blank">
                    <button class="google-button" @onclick="Search" 
                            style="background-color: @ThemeConfig.SearchBarBackground; color: @ThemeConfig.TextColor; border-color: @ThemeConfig.SearchBarBorder">
                        GitHub
                    </button>
                </a>
                <a href="https://www.linkedin.com/in/topedaramola" target="_blank">
                    <button class="google-button" 
                            style="background-color: @ThemeConfig.SearchBarBackground; color: @ThemeConfig.TextColor; border-color: @ThemeConfig.SearchBarBorder">
                        LinkedIn
                    </button>
                </a>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(searchQuery) && searchResults.Any())
    {
        <div class="search-results">
            <div class="result-stats">
                Found @searchResults.Count result@(searchResults.Count != 1 ? "s" : "")
            </div>
            @foreach (var result in searchResults)
            {
                <div class="result-item" style="border-color: @ThemeConfig.SearchBarBorder">
                    <div class="result-title">
                        <svg class="result-icon" focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"></path>
                        </svg>
                        <span>topedaramola.com</span>
                    </div>
                    <div class="result-content">@result</div>
                </div>
            }
        </div>
    }
</div>

@code {
    private ElementReference searchInput;
    private string searchQuery = "";
    private List<string> searchResults = new List<string>();
    private Dictionary<string, string> facts = new Dictionary<string, string>
    {
        {"contact1", "tope.daram@gmail.com"},
        {"contact2", "(769)798-8279 (Mobile)"},
        {"contact", "www.linkedin.com/in/topedaramola, topedaramola.com, github.com/toped"},
        {"skills", "Adobe ColdFusion, Transact-SQL (T-SQL), RabbitMQ"},
        {"certifications", "Swift Training, Microsoft Certified: Azure Fundamentals, Information Assurance Certification, Level Up to iOS 8, Introduction to Angular"},
        {"honors", "Deans’ Scholar"},
        {"summary", "Experienced Software Engineer with a demonstrated history. Passionate technical leader that is committed to driving progress by delivering results. Tope leads and serves by example to strengthen relationships, build trust, and encourage collaboration between teams. Armed with his experience and understanding of technology, he not only gets things done, but encourages and leads others to do the same."},
        {"experience", "Microsoft: Software Engineer II (Nov 2021 - Present), Capital One: Software Engineer (May 2021 - Nov 2021), AT&T: Professional - Software Engineer (Sep 2019 - May 2021), Professional - Applications Developer (Sep 2018 - Sep 2019), Sr. Specialist - Technology Development Program (Jul 2017 - Sep 2018), Mississippi State University: Software Applications Developer (Jul 2014 - Jul 2017), Student Programmer (May 2013 - Jul 2014), Webmaster for I.M.A.G.E. Program (Aug 2010 - Aug 2012), JCPenney: Sales Associate (May 2011 - Jul 2012), Mississippi State University Entrepreneurship Center: Student Assistant (Aug 2009 - Dec 2009), Vector Marketing: Sales Representative (Jun 2009 - Jul 2009)"},
        {"education1", "Mississippi State University: Master’s Degree, Computer Science (2015 - 2017), Bachelor’s Degree, Computer Engineering (2009 - 2014), Murrah High School: High School Diploma (2005 - 2009)"},
        {"education2", "Mississippi State University: Bachelor’s Degree, Computer Engineering (2009 - 2014), Murrah High School: High School Diploma (2005 - 2009)"},
        {"education3", "Murrah High School: High School Diploma (2005 - 2009)"}
    };

    private List<string> searchSuggestions = new()
    {
        "Microsoft experience",
        "Education",
        "Skills",
        "Certifications",
        "Contact info",
        "Honors",
    };

    private bool showSuggestions = false;

    protected override void OnInitialized()
    {
        ThemeConfig.OnThemeChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ThemeConfig.OnThemeChanged -= StateHasChanged;
    }

    private void HandleSearch()
    {
        if (string.IsNullOrEmpty(searchQuery))
        {
            searchResults.Clear();
            return;
        }

        searchResults = facts
            .Where(f => f.Key.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) 
                    || f.Value.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .Select(f => f.Value)
            .ToList();
    }

    private void Search()
    {
        HandleSearch();
    }

    private async Task ApplySuggestion(string suggestion)
    {
        searchQuery = suggestion;
        HandleSearch();
        await searchInput.FocusAsync();
    }

    private void ShowSuggestions()
    {
        showSuggestions = true;
    }

    private void HideSuggestions()
    {
        // Small delay to allow click events to fire before hiding
        Task.Delay(100).ContinueWith(_ => 
        {
            showSuggestions = false;
            StateHasChanged();
        });
    }
}